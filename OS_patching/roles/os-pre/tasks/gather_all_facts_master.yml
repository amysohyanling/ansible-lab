---
- name: 'Precheck |  BLOCK : Gather all facts'
  block:
    - name: 'GATHER_FACTS | Get the precheck facts'
      ansible.builtin.setup:
      register: precheck_facts_result

    # Get all running services
    - name: 'GATHER_FACTS | Get service facts'
      ansible.builtin.service_facts:
      register: precheck_servicefacts_result

#    got to change the services name - here is wildfly 
    - name: Check puppet service status
      ansible.builtin.set_stats:
        data:
          service_name: " {{ ansible_facts['services']['jboss-wildfly.service']['name'] }}"
          service_state: " {{ ansible_facts['services']['jboss-wildfly.service']['state'] }}"

    - name: Check puppet service status
      ansible.builtin.set_fact:
        service_name: " {{ ansible_facts['services']['jboss-wildfly.service']['name'] }}"
        service_state: " {{ ansible_facts['services']['jboss-wildfly.service']['state'] }}"

# THIS PART ONWARDS IS FOR /ETC/HOSTS
    - name: Read /etc/hosts file
      ansible.builtin.command: cat /etc/hosts 
      register: hosts_file

    - name: debug hosts_file into set_fact
      ansible.builtin.set_fact:
        "{{ inventory_hostname }}_hosts_file_std": "{{ hosts_file.stdout_lines | default([]) }}"

    - name: debug hosts_file into set_stats
      ansible.builtin.set_stats:
        data:
          "{{ inventory_hostname }}_hosts_file_std": "{{ hosts_file.stdout_lines | default([]) }}"

    - name: Initialize all_hostname facts
      ansible.builtin.set_fact:
        all_hostname: []

    - name: debug hosts_file into set_stats
      ansible.builtin.set_stats:
        data:
          all_hostname: "{{ all_hostname + (lookup('vars', inventory_hostname + '_hosts_file_std')) }}"

    - name: debug all_hostname
      ansible.builtin.debug:
        var: all_hostname

# THIS PART ONWARDS IS FOR /ETC/RESOLV
    - name: Read /etc/resolv.conf
      ansible.builtin.command: cat /etc/resolv.conf
      register: resolv_conf

    - name: debug resolv_conf
      ansible.builtin.set_fact:
        "{{ inventory_hostname }}_resolv_conf_std": "{{ resolv_conf.stdout_lines | default([]) }}"

    - name: debug resolve_conf
      ansible.builtin.set_stats:
        data:
          "{{ inventory_hostname }}_resolv_conf_std": "{{ resolv_conf.stdout_lines | default([]) }}"

    - name: Initialize all_hostname facts
      ansible.builtin.set_fact:
        all_resolv: []

    - name: debug resolv_conf
      ansible.builtin.set_stats:
        data:
          all_resolv: "{{ all_resolv + (lookup('vars', inventory_hostname + '_resolv_conf_std')) }}"

    - name: debug all_hostname
      ansible.builtin.debug:
        var: all_resolv


# THIS PART ONWARDS IS FOR MOUNT POINT

    - name: check mount point
      ansible.builtin.command: df -TPh -x tmpfs
      register: mount_point

    - name: debug mount_point
      ansible.builtin.set_fact:
        "{{ inventory_hostname }}_mount_point_std": "{{ mount_point.stdout_lines | default([]) }}"

    - name: debug mount_point
      ansible.builtin.set_stats:
        data:
          "{{ inventory_hostname }}_mount_point_std": "{{ mount_point.stdout_lines | default([]) }}"

    - name: Initialize all_hostname facts
      ansible.builtin.set_fact:
        all_mountpoint: []

    - name: debug mount_point_std
      ansible.builtin.set_stats:
        data:
          all_mountpoint: "{{ all_mountpoint + (lookup('vars', inventory_hostname + '_mount_point_std')) }}"

    - name: debug all_hostname
      ansible.builtin.debug:
        var: all_mountpoint

  rescue:
    - name: 'GATHER_FACTS |  Set failure message'
      ansible.builtin.set_fact:
        pre_check_status: false
        pre_check_fail: true
        pre_check_fail_stage: 'GATHER_FACTS'
        pre_check_fail_msg: "{{ ansible_failed_result }}"  

